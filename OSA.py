"""
    OSA.py
    A game framework and state machine that utilizes the core functionality
    of Pygame. OSA provides a modular framework design that makes it easy
    to transition between game states and create sandbox envirnments for
    testing and running code.

    Author: Thomas Richardson
    Date: 2025-04-17
    Version: 0.3.0
    Change Log:
        Version 0.2.0 - Added TileSet
        Version 0.3.0 - Added Animation
        Version 0.3.1 - Added active and visible bools to GameState
"""

#-------------------------------------------------------------------------------
#   Import Modules
#-------------------------------------------------------------------------------

import pygame as pg

#-------------------------------------------------------------------------------
#   Global Variables
#-------------------------------------------------------------------------------

COLOR_TRANSPARENT: list[int,int,int] = [255,0,255]

#-------------------------------------------------------------------------------
#   Class Definitions
#-------------------------------------------------------------------------------

class GameObject:
    def __init__(self) -> None:
        self.active = True
        self.visible = True

        return
    #end __init__

    def render(self, surface) -> None:

        return
    #end render

    def update(self) -> None:

        return
    #end update
#end GameObject

class GameState:
    def __init__(self, title = '') -> None:
        self.active: bool = True
        self.visible: bool = True
        self.title: str = ''
        self.bgColor: list[int,int,int] = [0,0,0]
        self.gameObjects: list[GameObject] = list()

        return
    #end __init__

    def render(self, surface) -> None:
        if self.visible:
            #clear the screen
            surface.fill(self.bgColor)
            
            #render each game object
            for obj in self.gameObjects:
                obj.render(surface)
            #end for
        #end if

        return
    #end render

    def update(self) -> None:
        if self.active:
            #update each game object
            for obj in self.gameObjects:
                obj.update()
            #end for
        #end if

        return
    #end update

    def handleKeyboard(self, keyboard) -> None:

        return
    #end handleKeyboard

    def handleMouseButtons(self, mouseButtons) -> None:

        return
    #end handleMouseButtons

    def handleMousePos(self, mousePos) -> None:

        return
    #end handleMouseButtons

    def handleBounds(self, bounds) -> None:

        return
    #end handleBounds

    def mixAudio(self) -> None:
        
        return
    #end mixAudio

    def enter(self) -> None:
        self.active = True
        self.visible = True

        return
    #end enter

    def exit(self) -> None:
        self.active = False
        self.visible = False

        return
    #end exit
#end GameState

class Game:
    #byte string for the logo data
    icon = b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff8x\r\xff8x\r\xff8x\r\xff\xc4\xc4\xc4\xff8x\r\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff8x\r\xff8x\r\xff8x\r\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff8x\r\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff8x\r\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff8x\r\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff8x\r\xff8x\r\xff8x\r\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff8x\r\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff8x\r\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff8x\r\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff8x\r\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\xc4\xc4\xc4\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00f\xc7\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

    def __init__(self,title = '',displaySize=[800,600],renderSize=[800,600],gameStates=dict()):
        #initialize pygame
        pg.init()

        #set up game display
        self.title: str = title
        pg.display.set_caption(self.title)
        pg.display.set_icon(pg.image.frombytes(Game.icon,(32,32),"RGBA"))
        self.displaySize: list(int) = list(displaySize)
        self.display: Surface = pg.display.set_mode(self.displaySize)
        self.renderSize: list(int) = list(renderSize)
        self.renderScale: list(float) = [
            float(self.displaySize[i]) / float(self.renderSize[i])
            for i in range(2)
        ]
        self.renderBuffer: Surface = pg.surface.Surface(self.renderSize)

        #set up game sound

        #set up game inputs
        self.fps: int = 60
        self.clock: Clock = pg.time.Clock()
        self.keyboard: list(bool) = pg.key.get_pressed()
        self.mouseButton: list(bool) = pg.mouse.get_pressed()
        self.mousePos: list(int) = pg.mouse.get_pos()
        self.running: bool = True

        #set up game states
        self.gameStates: dict(GameState) = {'':GameState()}
        self.activeState: GameState = self.gameStates['']

        return
    #end __init__

    def render(self) -> None:
        #clear the render buffer
        self.renderBuffer.fill((0,0,0))

        #run the render method on the active game state
        if isinstance(self.activeState,GameState):
            if self.activeState.visible:
                self.activeState.render(self.renderBuffer)
            #end if
        #end if

        #blit the scaled render buffer to the display
        pg.transform.scale(
            self.renderBuffer, self.displaySize, self.display
        )

        #update the display
        pg.display.flip()

        return
    #end render

    def update(self) -> None:
        #run the update method on the active game state
        if isinstance(self.activeState,GameState):
            if self.activeState.active:
                self.activeState.update()
            #end if
        #end if

        return
    #end render

    def handleEvents(self) -> None:
        #poll events until the event queue is empty
        for event in pg.event.get():
            if event.type == pg.QUIT:
                self.running = False
            #end if
        #end for
        
        return
    #end handleEvents

    def handleInputs(self) -> None:
        #update keyboard and mouse button states
        self.keyboard = pg.key.get_pressed()
        self.mousebutton = pg.mouse.get_pressed()

        #get the cursor position
        self.mousePos = pg.mouse.get_pos()
        self.mousePos = [
            int(self.mousePos[i] / self.renderScale[i])  for i in range(2)
        ]

        #call the handleInputs method on the active Game State
        if isinstance(self.activeState,GameState):
            self.activeState.handleKeyboard(
                self.keyboard
            )
            self.activeState.handleMouseButtons(
                self.mouseButton
            )
            self.activeState.handleMousePos(
                self.mousePos
            )
        #end if
        
        return
    #end handleEvents

    def handleBounds(self) -> None:
        #call the handleBounds method on the active Game State
        if isinstance(self.activeState, GameState):
            self.activeState.handleBounds(self.renderSize)
        #end if

        return
    #end handlBounds

    def mixAudio(self) -> None:
        #call the mixAudio method on the active Game State
        if isinstance(self.activeState, GameState):
            self.activeState.mixAudio()
        #end if
        
        return
    #end mixAudio

    def run(self) -> None:
        #begin the main game loop
        while self.running:
            self.handleEvents()
            self.handleInputs()
            self.update()
            self.handleBounds()
            self.mixAudio()
            self.render()
            self.clock.tick(self.fps)
        #end while

        self.quit()

        return
    #end run

    def quit(self) -> None:
        self.activeState.exit()
        pg.quit()

        return
    #end quit
#end Game
    
#Sprite Class 
class Sprite (GameObject):
    def __init__(self, imgPath=None, spriteSize=[8,8]):
        super().__init__()

        self.rect = pg.Rect([0,0],spriteSize)
        self.velocity = pg.math.Vector2(0,0)
        self.orientation = float()

        if imgPath == None:
            self.masterImg = pg.surface.Surface(spriteSize)
            self.masterImg.fill([255,0,0])
        elif isinstance(imgPath,pg.surface.Surface):
            self.masterImg = imgPath
        else:
            self.masterImg = pg.image.load(imgPath)

        self.image = pg.surface.Surface(spriteSize)
        self.image.blit(self.masterImg,(0,0))
        self.image.set_colorkey((255,0,255))

        return

    def render (self, surface):
        surface.blit(self.image, self.rect)

        return

    def update(self) -> None:
        self.rect.center += self.velocity

        return
    #end update
#end Sprite

class TileSet(GameObject):
    def __init__(self, tileSetImage, tileSize, colorKey = COLOR_TRANSPARENT) -> None:
        #initialize as the parent class
        super().__init__()

        #load the tileSetImage
        self.tileSize: list[int] = tileSize
        self.colorKey : list [int,int,int] = colorKey
        self.master: Surface = pg.image.load(tileSetImage)
        self.master.set_colorkey(colorKey)
        
        #split master tile image into tiles
        self.numTiles: int = 0
        self.tiles: list[Surface] = list()
        
        for tileY in range(0,self.master.get_height(),self.tileSize[1]):
            for tileX in range(0,self.master.get_width(),self.tileSize[0]):
                try:
                    self.tiles.append(
                        self.master.subsurface(
                            pg.Rect(tileX,tileY,self.tileSize[0],self.tileSize[1])    
                        )
                    )
                    self.numTiles += 1
                except:
                    print("Could not load tile.")
                #end try
            #end for
        #end for
        
        return
    #end __init__
#end TileSet

class Animation(Sprite):
    def __init__(self, tileSetImage, tileSize, colorKey = COLOR_TRANSPARENT) -> None:        
        #load the tileSetImage
        self.tileSize: list[int] = tileSize
        self.colorKey : list [int,int,int] = colorKey
        self.master: Surface = pg.image.load(tileSetImage)
        self.master.set_colorkey(colorKey)
        
        #split master tile image into tiles
        self.numTiles: int = 0
        self.tiles: list[Surface] = list()
        
        for tileY in range(0,self.master.get_height(),self.tileSize[1]):
            for tileX in range(0,self.master.get_width(),self.tileSize[0]):
                try:
                    self.tiles.append(
                        self.master.subsurface(
                            pg.Rect(tileX,tileY,self.tileSize[0],self.tileSize[1])    
                        )
                    )
                    self.numTiles += 1
                except:
                    print("Could not load tile.")
                #end try
            #end for
        #end for

        #set up timings for rendering frames
        self.currentFrame: int = 0
        self.frameDelays: list[int] = [
            200 for i in range(self.numTiles)
        ]
        self.currentFrameTick: int = 0
        self.lastFrameTick: int = 0
        
        #initialize as the parent class
        super().__init__(self.tiles[self.currentFrame], tileSize)
        
        return
    #end __init__

    def update(self) -> None:
        if self.active:
            self.currentFrameTick = pg.time.get_ticks()
            frameDelay: int = self.currentFrameTick - self.lastFrameTick

            if frameDelay >= self.frameDelays[self.currentFrame]:
                self.currentFrame += 1
                self.lastFrameTick = self.currentFrameTick

                if self.currentFrame >= self.numTiles:
                    self.currentFrame = 0
                #end if
            #end if
        #end if

        return
    #end update

    def render(self,surface) -> None:
        if self.visible:
            surface.blit(self.tiles[self.currentFrame],self.rect)
        #end if
        
        return
    #end render

    def pause(self) -> None:
        self.active = False

        return
    #end pause

    def play(self) -> None:
        self.active = True

        return
    #end play

    def stop(self) -> None:
        self.currentFrame = 0
        self.active = False

        return
    #end stop
#end Animation

#-------------------------------------------------------------------------------
#   Function Definitions
#-------------------------------------------------------------------------------

def main() -> None:
    game: Game = Game('Test Game', displaySize = [800,600])
    game.run()

    return
#end main

#-------------------------------------------------------------------------------
#   Program Entry Point
#-------------------------------------------------------------------------------

if __name__ == '__main__':
    main()
#end if
